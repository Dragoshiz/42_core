MINISHELL by Alina & Ralf

Notes:
> env has to be expanded if there are a lot of new variables (reallocate double the size!)

STRUCTURE:
> Parsing/Input check
>>> valid arguments
>>> error handling
>>> handling/ignoring special characters ('\', ';', unclosed quotes, single quotes, double quotes)

> executing commands
>>> redirections
>>> pipes
>>> environment variables
>>> error handling commands

> ❌ Design (colors, prompt)



> additional (non-required) boni
>>> cd works without arguments (changes to home directory!)




##############################################################################################################################################################

REQUIRED:
• ✅ Display a prompt when waiting for a new command
					###--> DONE(Ralf)
• ❌ Have a working history
					###-->
• ✅ Search and launch the right executable (based on the PATH variable or using a relative or an absolute path)
					###--> DONE(Ralf, from pipex)
• ❌ Not use more than one global variable
					###-->
• ❌ Not interpret unclosed quotes or special characters which are not required by the subject such as \ (backslash) or ; (semicolon).
					###-->
• ❌ Handle ’ (single quote) which should prevent the shell from interpreting the meta- characters in the quoted sequence.
					###-->
• ❌ Handle " (double quote) which should prevent the shell from interpreting the meta- characters in the quoted sequence except for $ (dollar sign).
					###-->
• ❌ Implement redirections:
	◦ < should redirect input.  
					###-->
	◦ > should redirect output.
					###-->
	◦ << should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn’t have to update the history!
					###-->
	◦ >> should redirect output in append mode.
					###-->
• ❌ Implement pipes (| character). The output of each command is connected to the input of the next command via a pipe.
					###--> REDIRECTION WORKING, PIPE DETECTION NEEDED (no waitpid() so far!)
• ❌ Handle environment variables ($ followed by a sequence of characters) which should expand to their values.
					###-->
• ❌ Handle $? which should expand to the exit status of the most recently executed foreground pipeline.
					###-->
• ❌ Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash. In interactive mode:
	◦ ctrl-C displays a new prompt on a new line. 
	◦ ctrl-D exits the shell.
	◦ ctrl-\ does nothing.
					###-->
• ❌ Your shell must implement the following builtins:
	👆🏼 has to be included BEFORE normal command run!
	◦ echo with option -n
					###-->
	◦ 🚧 cd with only a relative or absolute path 
					###--> update error checking!
	◦ ✅ pwd with no options
					###--> no memory leaks!
	◦ ✅ export with no options
					###--> runs with arguments, no memory leaks
	◦ unset with no options
					###-->
	◦ env with no options or arguments
					###-->
	◦ exit with no options
					###-->

##############################################################################################################################################################

BONUS:
• && and || with parenthesis for priorities
					###-->
• Wildcards * should work for the current working directory
					###-->

		