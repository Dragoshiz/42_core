MINISHELL by Alina & Ralf

To fix: üß∞
‚úÖ > exit segfaults with nonnumeric arguments 
‚úÖ > everything from three double/single quotes fails (like ''' or """) 
‚úÖ > BtB$ echo THIS > outfile --> does not work
‚úÖ > unclosed single/double quotes segfault (from 4 pieces on)
‚úÖ	>>>>> ""echo"" hola -> fails
‚úÖ > BtB$ $THIS"ho" echo -> gives invalid free
‚úÖ > redirect sign  (error messages)
‚úÖ > set exit status with set_exit_status in Alinas errors, also secure the mallocs with error messages
‚úÖ > BtB$ echo -nHOLA fdas >> behaves like echo -n fdas
‚úÖ > echo my shit terminal {$TERM} fdsafd >> does stop at first bracket && doesnt expand var?
‚úÖ > segfault on 'exit'
‚úÖ > export HOLA -> in env it's HOLA="" instead of the expected HOLA(fullstop)
‚úÖ > unset and then echo $PATH (or anything else) gives segfault
‚úÖ > export "HIS"fa=ha -> double free
‚úÖ > cd .. gives malloc error and segfaults? -> double check everything!
‚úÖ > env does not show OLDPWD (export does, but doesnt get updated)
‚úÖ > cd crashes on EVERY COMMAND if $HOME is unset
‚úÖ > tokenizer leaks (some malloc)
üå∏ > set_command_path in interpreter leaks (must be freed)
üå∏ > invalid free in interpreter
üå∏ > invalid free in interpreter (in my_str_join -> 2x)
üå∏ > pass cmd struct to the heredoc and close the fd in the child if not equal to stds
‚úÖ > here doc doesn't read empty lines
üå∏ > here doc doesn't work with signals
‚úÖ > echo hola > hello _ echo hola >> hello _ echo hola > hello >> hello appends
‚úÖ > redirect without spaces
‚úÖ > ls | pwd -> error in loop_clean
‚úÖ > exit 100 does not set exit status correctly? but only for minishell in minishell
‚úÖ > double free if ctrl+d after piping
üå∏üë∑üèº‚Äç‚ôÇÔ∏è > check null after var exp
üå∏üë∑üèº‚Äç‚ôÇÔ∏è > signal ctrl+c in heredoc
‚úÖ > make re restructure 
üë∑üèº‚Äç‚ôÇÔ∏è > readline prompt invalid command cannot go back to empty
üå∏üë∑üèº‚Äç‚ôÇÔ∏è > why arent all 3 stds open after commands?
> echo \$HOME
> export | grep "HOME"


Check soon ‚è∞:
üë∑üèº‚Äç‚ôÇÔ∏èüå∏ > double-check subject requirements together!
‚úÖ > redirect stdin//close pipes if first command throws error
‚úÖ > how to do a makefile that compiles a subdir called "builtins"?
üë∑üèº‚Äç‚ôÇÔ∏èüå∏ > run all commands from french excel sheet
‚úÖ > redo run_commands (check pipes!) -> look at eval sheet! >> cat | cat | ls
‚úÖ > handle this:
	raweber@c2s8d25 ~/core/minishell$ cd | cat -e
	raweber@c2s8d25 ~/core/minishell$ cd | pwd
‚úÖ > does cleanup work ok with a proper linked list command?
üë∑üèº‚Äç‚ôÇÔ∏èüå∏ > üöß Design (colors, prompt ?)
‚úÖ > unset does not unset single digit variables (but unsets a with ab?!) // HEEEREEE
‚úÖ > export HOLA=bonjour | cat -e | cat -e -> should do nothing!
üë∑üèº‚Äç‚ôÇÔ∏è > makefile rule for not remaking libft when running make re if nothing changed there?
> exit status on empty here_doc

> additional (non-required) boni
>>> cd works without arguments (changes to home directory!)
>>> handling unclosed quotes with heredoc

##############################################################################################################################################################

REQUIRED:
‚Ä¢ ‚úÖ Display a prompt when waiting for a new command
‚Ä¢ ‚úÖ Have a working history
‚Ä¢ ‚úÖ Search and launch the right executable (based on the PATH variable or using a relative or an absolute path)
‚Ä¢ ‚úÖ Not use more than one global variable
‚Ä¢ ‚úÖ Not interpret unclosed quotes or special characters which are not required by the subject such as \ (backslash) or ; (semicolon).
‚Ä¢ ‚úÖ Handle ‚Äô (single quote) which should prevent the shell from interpreting the meta- characters in the quoted sequence.
‚Ä¢ ‚úÖ Handle " (double quote) which should prevent the shell from interpreting the meta- characters in the quoted sequence except for $ (dollar sign).
‚Ä¢ ‚ùå Implement redirections:
	‚ó¶ < should redirect input.  
					###-->
	‚ó¶ > should redirect output.
					###-->
	‚ó¶ << should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn‚Äôt have to update the history!
					###-->
	‚ó¶ >> should redirect output in append mode.
					###-->
‚Ä¢ ‚úÖ Implement pipes (| character). The output of each command is connected to the input of the next command via a pipe.
					###--> REDIRECTION WORKING, PIPE DETECTION NEEDED (no waitpid() so far!)
‚Ä¢ ‚úÖ Handle environment variables ($ followed by a sequence of characters) which should expand to their values.
					###-->
‚Ä¢ ‚úÖ Handle $? which should expand to the exit status of the most recently executed foreground pipeline.
					###-->
‚Ä¢ ‚úÖ Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash. In interactive mode:
	‚ó¶ ctrl-C displays a new prompt on a new line. 
	‚ó¶ ctrl-D exits the shell.
	‚ó¶ ctrl-\ does nothing.
‚Ä¢ ‚úÖ Your shell must implement the following builtins:
	‚ó¶ ‚úÖ echo with option -n
	‚ó¶ ‚úÖ cd with only a relative or absolute path 
	‚ó¶ ‚úÖ pwd with no options
	‚ó¶ ‚úÖ export with no options
	‚ó¶ ‚úÖ unset with no options
	‚ó¶ ‚úÖ env with no options or arguments
	‚ó¶ ‚úÖ exit with no options

##############################################################################################################################################################

BONUS:
‚Ä¢ && and || with parenthesis for priorities
					###-->
‚Ä¢ Wildcards * should work for the current working directory
					###-->
